Description: Don't do anything to windows or macosx directories
Author: Dongjin Kim <tobetter@gmail.com>

Index: arduino/build/build.xml b/build/build.xml
===================================================================
--- a/build/build.xml
+++ b/build/build.xml
@@ -355,237 +355,6 @@
     <echo message="                     Revision in BaseNoGui.java is: ${revision.base}" />
   </target>
 
-  <!-- - - - - - - - -->
-  <!-- Mac OS X      -->
-  <!-- - - - - - - - -->
-  <target name="macosx-clean" depends="subprojects-clean" description="Clean Mac OS X build">
-    <delete dir="macosx/work" />
-    <delete dir="macosx/working_dir" />
-    <delete dir="macosx/working.dmg" />
-    <delete file="macosx/arduino-*.dmg" />
-    <delete>
-      <fileset dir="macosx" includes="arduino-*macosx*.zip"/>
-    </delete>
-  </target>
-
-  <target name="macosx-checkos" unless="macosx">
-    <echo>
-      =======================================================
-      Arduino for Mac OS X can only be built on Mac OS X.
-
-      Bye.
-      =======================================================
-    </echo>
-    <fail message="wrong platform (${os.name})" />
-  </target>
-
-  <target name="macosx-build" if="macosx" depends="revision-check, macosx-checkos, subprojects-build" description="Build Mac OS X version">
-    <fail unless="MACOSX_BUNDLED_JVM" message="MacOSX requires MACOSX_BUNDLED_JVM property set"/>
-    <mkdir dir="${staging_folder}/work" />
-
-    <antcall target="unzip">
-      <param name="archive_file" value="${staging_folder}/appbundler-1.0ea-arduino4.jar.zip" />
-      <param name="archive_url" value="https://downloads.arduino.cc/appbundler-1.0ea-arduino4.jar.zip" />
-      <param name="final_folder" value="${staging_folder}/appbundler-1.0ea-arduino4" />
-      <param name="dest_folder" value="${staging_folder}/appbundler-1.0ea-arduino4" />
-    </antcall>
-
-    <taskdef name="bundleapp" classname="com.oracle.appbundler.AppBundlerTask" classpath="${staging_folder}/appbundler-1.0ea-arduino4/appbundler-1.0ea-arduino4.jar"/>
-
-    <bundleapp
-            jvmRequired="1.8"
-            jrepreferred="true"
-            outputdirectory="${staging_folder}/work"
-            name="Arduino"
-            displayname="Arduino"
-            executablename="Arduino"
-            identifier="cc.arduino.Arduino"
-            shortversion="${version}"
-            version="${revision}"
-            signature="Pde1"
-            icon="macosx/processing.icns"
-            mainclassname="processing.app.Base"
-            copyright="Arduino LLC"
-            applicationCategory="public.app-category.education"
-            minimumsystemversion="10.8"
-            highresolutioncapable="true">
-
-      <runtime dir="${MACOSX_BUNDLED_JVM}"/>
-
-      <arch name="x86_64"/>
-      <arch name="i386"/>
-
-      <classpath refid="runtime.jars"/>
-
-      <option value="-Dapple.awt.application.name=Arduino"/>
-      <option value="-Dcom.apple.macos.use-file-dialog-packages=true"/>
-      <option value="-Dcom.apple.smallTabs=true"/>
-      <option value="-DAPP_DIR=$APP_ROOT/Contents/Java"/>
-      <option value="-Djava.ext.dirs=$JVM_RUNTIME/Contents/Home/lib/ext/:$JVM_RUNTIME/Contents/Home/jre/lib/ext/"/>
-
-      <!--
-      <option value="-Dapple.awt.showGrowBox=false"/>
-      <option value="-Dapple.awt.Antialiasing=false"/>
-      <option value="-Dapple.awt.TextAntialiasing=true"/>
-      <option value="-Dcom.apple.hwaccel=true"/>
-      <option value="-Dapple.awt.graphics.UseQuartz=true"/>
-      -->
-
-      <!--<option value="-Dcom.apple.macos.useScreenMenuBar=true"/>-->
-
-      <!-- Workaround since the icon parameter for bundleapp doesn't work -->
-      <option value="-Xdock:name=Arduino"/>
-      <option value="-Dcom.apple.mrj.application.apple.menu.about.name=Arduino"/>
-      <option value="-Dfile.encoding=UTF-8"/>
-
-      <option value="-Xms128M"/>
-      <option value="-Xmx512M"/>
-      <option value="-splash:$APP_ROOT/Contents/Java/lib/splash.png"/>
-
-      <bundledocument extensions="ino,c,cpp,h"
-                      icon="macosx/pde.icns"
-                      name="Arduino Source File"
-                      role="Editor" ispackage="false">
-      </bundledocument>
-
-    </bundleapp>
-
-    <mkdir dir="${staging_folder}/work/${staging_hardware_folder}" />
-
-    <copy todir="${staging_folder}/work/${staging_hardware_folder}/../">
-      <fileset dir="shared" includes="lib/**" />
-      <fileset file="shared/revisions.txt" />
-    </copy>
-
-    <mkdir dir="${staging_folder}/work" />
-    <mkdir dir="${staging_folder}/work/${staging_hardware_folder}" />
-
-    <antcall target="macosx-build-avr-toolchain" />
-
-    <antcall target="assemble">
-      <param name="target.path" value="${staging_folder}/work/${staging_hardware_folder}/.." />
-    </antcall>
-
-    <antcall target="unzip">
-      <param name="archive_file" value="./libastylej-2.05.1-4.zip" />
-      <param name="archive_url" value="https://downloads.arduino.cc/libastylej-2.05.1-4.zip" />
-      <param name="final_folder" value="${staging_folder}/libastylej-2.05.1" />
-      <param name="dest_folder" value="${staging_folder}" />
-    </antcall>
-    <copy file="macosx/libastylej-2.05.1/libastylej.jnilib" todir="macosx/work/${staging_hardware_folder}/../lib/" />
-    <chmod perm="755" file="macosx/work/${staging_hardware_folder}/../lib/libastylej.jnilib" />
-    <copy file="macosx/libastylej-2.05.1/libastylej.jnilib" tofile="macosx/work/${staging_hardware_folder}/../lib/libastylej.dylib" />
-    <chmod perm="755" file="macosx/work/${staging_hardware_folder}/../lib/libastylej.dylib" />
-
-    <antcall target="unzip">
-      <param name="archive_file" value="./liblistSerials-${LIBLISTSERIAL-VERSION}.zip" />
-      <param name="archive_url" value="https://downloads.arduino.cc/liblistSerials/liblistSerials-${LIBLISTSERIAL-VERSION}.zip" />
-      <param name="final_folder" value="${staging_folder}/liblistSerials-${LIBLISTSERIAL-VERSION}" />
-      <param name="dest_folder" value="${staging_folder}" />
-    </antcall>
-    <copy file="macosx/liblistSerials-${LIBLISTSERIAL-VERSION}/osx/liblistSerialsj.dylib" todir="macosx/work/${staging_hardware_folder}/../lib/" />
-    <chmod perm="755" file="macosx/work/${staging_hardware_folder}/../lib/liblistSerialsj.dylib" />
-
-    <antcall target="build-arduino-builder" />
-
-    <antcall target="portable-${portable}">
-      <param name="parentdir" value="macosx/work/${staging_hardware_folder}/.." />
-    </antcall>
-  </target>
-
-  <!-- Unzip AVR tools -->
-  <target name="macosx-build-avr-toolchain" unless="light_bundle">
-    <antcall target="avr-toolchain-bundle">
-      <param name="unpack_target" value="untar"/>
-      <param name="gcc_archive_file" value="avr-gcc-${AVRGCC-VERSION}-i386-apple-darwin11.tar.bz2"/>
-      <param name="gcc_version" value="${AVRGCC-VERSION}"/>
-      <param name="avrdude_archive_file" value="avrdude-${AVRDUDE-VERSION}-i386-apple-darwin11.tar.bz2"/>
-      <param name="avrdude_version" value="${AVRDUDE-VERSION}"/>
-      <param name="arduinoOTA_archive_file" value="arduinoOTA-${arduinoOTA-VERSION}-darwin_amd64.tar.bz2"/>
-      <param name="arduinoOTA_version" value="${arduinoOTA-VERSION}"/>
-    </antcall>
-
-    <chmod perm="+x">
-      <fileset dir="${staging_folder}/work/${staging_hardware_folder}/tools" includes="**/bin/*"/>
-      <fileset dir="${staging_folder}/work/${staging_hardware_folder}/tools" includes="**/libexec/gcc/avr/4.8.1/*"/>
-    </chmod>
-  </target>
-
-  <target name="macosx-run" depends="build,start"/>
-
-  <target name="macosx-start">
-    <exec executable="macosx/work/Arduino.app/Contents/MacOS/Arduino" spawn="false" failonerror="true"/>
-  </target>
-
-  <!-- - - - - - - - - - - - - - - - -->
-  <!-- Sign application for MacOSX.  -->
-  <!-- - - - - - - - - - - - - - - - -->
-  <target name="macosx-signed-dist" if="macosx" depends="macosx-singed-dist-check, dist"
-    description="Create a downloadable and signed .zip for the Mac OS X version">
-    <fail unless="version" message="Please set the property 'version' to correctly sign distribution file" />
-
-    <!-- Remove everything from working folder -->
-    <delete dir="macosx/work/Arduino.app" />
-
-    <!-- Unzip unsigned app into working dir -->
-    <exec executable="unzip" dir="macosx/work" failonerror="true">
-      <arg line="../arduino-${version}-${platform}.zip" />
-    </exec>
-
-    <!-- Unlock keychain file -->
-    <exec executable="security" dir="macosx/work" failonerror="true">
-      <arg line="unlock-keychain -p &quot;${macosx-sign-keychain-pass}&quot; &quot;${macosx-sign-keychain}&quot;" />
-    </exec>
-
-    <!-- Sign app -->
-    <exec executable="codesign" dir="macosx/work" failonerror="true">
-      <arg line="--keychain &quot;${macosx-sign-keychain}&quot; --force -s &quot;${macosx-sign-id}&quot; --deep -v Arduino.app/" />
-    </exec>
-
-    <!-- Check for successful signing -->
-    <exec executable="codesign" dir="macosx/work" failonerror="true">
-      <arg line="-vvvv Arduino.app/" />
-    </exec>
-
-    <delete file="macosx/arduino-${version}-${platform}.zip" />
-
-    <!-- Create signed zip file -->
-    <exec executable="zip" dir="macosx/work" failonerror="true">
-      <arg line="-q -r ../arduino-${full-version}-signed.zip ." />
-    </exec>
-
-    <echo>
-      =======================================================
-      Arduino for Mac OS X built and signed.
-
-      macosx/arduino-${full-version}-signed.zip
-      =======================================================
-    </echo>
-  </target>
-
-  <target name="macosx-singed-dist-check">
-    <fail unless="macosx-sign-keychain" message="Please set the property 'macosx-sign-keychain' to the correct keychain file" />
-    <fail unless="macosx-sign-keychain-pass" message="Please set the property 'macosx-sign-keychain-pass' with the password to unlock the keychain" />
-    <fail unless="macosx-sign-id" message="Please set the property 'macosx-sign-id' to the correct cert identifier" />
-  </target>
-
-  <!-- - - - - - - - - - - - - - - - - - - -->
-  <!-- Build distribution file for MacOSX. -->
-  <!-- - - - - - - - - - - - - - - - - - - -->
-  <target name="macosx-dist" if="macosx" depends="build" description="Create a downloadable .zip for the Mac OS X version">
-    <exec executable="zip" dir="macosx/work" failonerror="true">
-      <arg line="-q -r ../arduino-${full-version}.zip ." />
-    </exec>
-
-    <echo>
-      =======================================================
-      Arduino for Mac OS X was built. Grab the image from
-
-      macosx/arduino-${full-version}.zip
-      =======================================================
-    </echo>
-  </target>
-
   <!-- - - - - - - - -->
   <!-- Linux         -->
   <!-- - - - - - - - -->
@@ -969,245 +738,6 @@
   <target name="linuxaarch64-dist" depends="linux-dist"
 	  description="Build .tar.xz of linux aarch64 version" />
 
-  <!-- - - - - - - - -->
-  <!-- Windows       -->
-  <!-- - - - - - - - -->
-
-  <target name="windows-clean" depends="subprojects-clean"
-	  description="Clean windows version">
-    <delete dir="windows/work" />
-    <delete>
-      <fileset dir="windows" includes="arduino-*windows*.zip"/>
-    </delete>
-  </target>
-
-  <target name="windows-checkos" unless="windows">
-    <echo>
-      =======================================================
-      Arduino for Windows can only be built on windows.
-
-      Bye.
-      =======================================================
-    </echo>
-
-    <fail message="wrong platform (${os.name})" />
-  </target>
-
-  <target name="download-launch4j-windows">
-    <antcall target="unzip-with-ant-task">
-      <param name="archive_file" value="windows/launch4j-3.9-win32.zip"/>
-      <param name="archive_url" value="https://downloads.arduino.cc/tools/launch4j-3.9-win32.zip"/>
-      <param name="final_folder" value="windows/launcher/launch4j"/>
-      <param name="dest_folder" value="windows/launcher/"/>
-    </antcall>
-  </target>
-
-  <target name="download-launch4j-linux">
-    <antcall target="untar">
-      <param name="archive_file" value="windows/launch4j-3.9-linux.tgz"/>
-      <param name="archive_url" value="https://downloads.arduino.cc/tools/launch4j-3.9-linux.tgz"/>
-      <param name="final_folder" value="windows/launcher/launch4j"/>
-      <param name="dest_folder" value="windows/launcher/"/>
-    </antcall>
-  </target>
-
-  <target name="windows-build"
-	  depends="revision-check, windows-checkos, subprojects-build"
-	  description="Build windows version">
-    <mkdir dir="windows/work" />
-    <mkdir dir="windows/work/${staging_hardware_folder}" />
-
-    <copy todir="windows/work/lib">
-      <fileset dir="shared" includes="icons/**/*.png"/>
-    </copy>
-
-    <!-- assemble the pde -->
-    <mkdir dir="windows/work/lib" />
-    <copy todir="windows/work/lib" flatten="true">
-      <fileset refid="runtime.jars" />
-    </copy>
-
-    <copy todir="windows/work">
-      <fileset dir="shared" includes="lib/**" />
-      <fileset file="shared/revisions.txt" />
-    </copy>
-
-    <fixcrlf file="windows/work/revisions.txt" eol="dos"/>
-    <fixcrlf file="windows/work/lib/formatter.conf" eol="dos"/>
-
-    <copy todir="windows/work">
-      <fileset dir="windows/dist" includes="*.dll" />
-    </copy>
-
-    <copy todir="windows/work">
-      <fileset dir="windows/dist" includes="drivers/**" />
-    </copy>
-
-    <antcall target="windows-build-avr-toolchain" />
-
-    <antcall target="unzip">
-      <param name="archive_file" value="./libastylej-2.05.1-4.zip" />
-      <param name="archive_url" value="https://downloads.arduino.cc/libastylej-2.05.1-4.zip" />
-      <param name="final_folder" value="${staging_folder}/libastylej-2.05.1" />
-      <param name="dest_folder" value="${staging_folder}" />
-    </antcall>
-    <copy file="windows/libastylej-2.05.1/AStylej.dll" todir="windows/work/lib" />
-    <copy file="windows/msvcp100.dll" todir="windows/work" />
-    <copy file="windows/msvcr100.dll" todir="windows/work" />
-
-    <antcall target="unzip">
-      <param name="archive_file" value="./liblistSerials-${LIBLISTSERIAL-VERSION}.zip" />
-      <param name="archive_url" value="https://downloads.arduino.cc/liblistSerials/liblistSerials-${LIBLISTSERIAL-VERSION}.zip" />
-      <param name="final_folder" value="${staging_folder}/liblistSerials-${LIBLISTSERIAL-VERSION}" />
-      <param name="dest_folder" value="${staging_folder}" />
-    </antcall>
-    <copy file="windows/liblistSerials-${LIBLISTSERIAL-VERSION}/windows/listSerialsj.dll" todir="windows/work/lib/" />
-    <antcall target="make-file-executable">
-      <param name="file" value="windows/work/lib/listSerialsj.dll" />
-    </antcall>
-
-    <delete dir="${staging_folder}/arduino-builder-windows" includeemptydirs="true"/>
-    <mkdir dir="${staging_folder}/arduino-builder-windows"/>
-    <antcall target="unzip-with-ant-task">
-      <param name="archive_file" value="./arduino-builder-windows-${ARDUINO-BUILDER-VERSION}.zip" />
-      <param name="archive_url" value="https://downloads.arduino.cc/tools/arduino-builder-windows-${ARDUINO-BUILDER-VERSION}.zip" />
-      <param name="final_folder" value="${staging_folder}/arduino-builder-windows/arduino-builder.exe" />
-      <param name="dest_folder" value="${staging_folder}/arduino-builder-windows" />
-    </antcall>
-    <copy file="${staging_folder}/arduino-builder-windows/arduino-builder.exe" tofile="windows/work/arduino-builder.exe" />
-    <antcall target="make-file-executable">
-      <param name="file" value="windows/work/arduino-builder.exe" />
-    </antcall>
-    <move file="${staging_folder}/arduino-builder-windows/tools" tofile="windows/work/tools-builder"/>
-    <antcall target="make-file-executable">
-      <param name="file" value="windows/work/tools-builder/ctags/5.8-arduino11/ctags.exe" />
-    </antcall>
-    <copy todir="windows/work/hardware" overwrite="true">
-      <fileset dir="${staging_folder}/arduino-builder-windows/hardware" includes="*.txt"/>
-    </copy>
-    <delete dir="${staging_folder}/arduino-builder-windows" includeemptydirs="true"/>
-
-    <exec executable="unzip" failonerror="true">
-      <arg value="-q" />
-      <arg value="-n" />
-      <arg value="-j" />
-      <arg value="-d" />
-      <arg value="windows/work/lib" />
-      <arg value="../arduino-core/lib/jna-4.2.2.jar" />
-      <arg value="com/sun/jna/win32-x86/jnidispatch.dll" />
-    </exec>
-    <move file="windows/work/lib/jnidispatch.dll" tofile="windows/work/lib/jnidispatch-4.2.2-win32-x86.dll" />
-    <antcall target="make-file-executable">
-      <param name="file" value="windows/work/lib/jnidispatch-4.2.2-win32-x86.dll" />
-    </antcall>
-
-    <exec executable="unzip" failonerror="true">
-      <arg value="-q" />
-      <arg value="-n" />
-      <arg value="-j" />
-      <arg value="-d" />
-      <arg value="windows/work/lib" />
-      <arg value="../arduino-core/lib/jssc-2.8.0-arduino3.jar" />
-      <arg value="libs/windows/jSSC-2.8_x86.dll" />
-    </exec>
-    <move file="windows/work/lib/jSSC-2.8_x86.dll" tofile="windows/work/lib/jSSC-2.8_x86.dll" />
-    <antcall target="make-file-executable">
-      <param name="file" value="windows/work/lib/jSSC-2.8_x86.dll" />
-    </antcall>
-    <exec executable="unzip" failonerror="true">
-      <arg value="-q" />
-      <arg value="-n" />
-      <arg value="-j" />
-      <arg value="-d" />
-      <arg value="windows/work/lib" />
-      <arg value="../arduino-core/lib/jssc-2.8.0-arduino3.jar" />
-      <arg value="libs/windows/jSSC-2.8_x86_64.dll" />
-    </exec>
-    <move file="windows/work/lib/jSSC-2.8_x86_64.dll" tofile="windows/work/lib/jSSC-2.8_x86_64.dll" />
-    <antcall target="make-file-executable">
-      <param name="file" value="windows/work/lib/jSSC-2.8_x86_64.dll" />
-    </antcall>
-
-    <antcall target="assemble">
-      <param name="target.path" value="windows/work" />
-    </antcall>
-
-    <delete dir="windows/launcher/launch4j"/>
-    <antcall target="download-${launch4j-download-unpack-target-name}" />
-
-    <property name="launch4j.dir" value="windows/launcher/launch4j/" />
-    <taskdef name="launch4j"
-	     classname="net.sf.launch4j.ant.Launch4jTask"
-	     classpath="${launch4j.dir}/launch4j.jar; ${launch4j.dir}/lib/xstream.jar" />
-
-    <copy todir="windows/work">
-      <fileset dir="windows/launcher"
-	       includes="application.ico, config.xml, config_debug.xml, arduino.l4j.ini, wrapper-manifest.xml"/>
-    </copy>
-    <launch4j configFile="windows/work/config.xml" fileVersion="${revision}.0" txtFileVersion="${revision}" productVersion="${revision}.0" txtProductVersion="${revision}"/>
-    <launch4j configFile="windows/work/config_debug.xml" fileVersion="${revision}.0" txtFileVersion="${revision}" productVersion="${revision}.0" txtProductVersion="${revision}"/>
-    <delete dir="windows/work" includes="application.ico, config.xml, config_debug.xml" />
-    <copy file="windows/work/arduino.l4j.ini" tofile="windows/work/arduino_debug.l4j.ini" />
-
-    <!-- cygwin requires html, dll, and exe to have the +x flag -->
-    <chmod perm="755">
-      <fileset dir="windows/work" includes="**/*.html, **/*.dll, **/*.exe" />
-    </chmod>
-
-    <!-- For JVM within JDK, release file is in parent directory -->
-    <property file="${WINDOWS_BUNDLED_JVM}/release" prefix="windows"/>
-    <property file="${WINDOWS_BUNDLED_JVM}/../release" prefix="windows"/>
-
-    <fail message="It looks like ${WINDOWS_BUNDLED_JVM} does not contain a Windows JVM">
-      <condition>
-        <not>
-          <equals arg1="${windows.OS_NAME}" arg2="&quot;Windows&quot;"/>
-        </not>
-      </condition>
-    </fail>
-
-    <copy todir="${staging_folder}/work/java" includeemptydirs="true" preservelastmodified="true" overwrite="true" failonerror="true">
-      <fileset dir="${WINDOWS_BUNDLED_JVM}" includes="*/**"/>
-    </copy>
-
-    <antcall target="portable-${portable}">
-      <param name="parentdir" value="${staging_folder}/work" />
-    </antcall>
-  </target>
-
-  <target name="windows-build-avr-toolchain">
-    <antcall target="avr-toolchain-bundle">
-      <param name="unpack_target" value="unzip"/>
-      <param name="gcc_archive_file" value="avr-gcc-${AVRGCC-VERSION}-i686-w64-mingw32.zip"/>
-      <param name="gcc_version" value="${AVRGCC-VERSION}"/>
-      <param name="avrdude_archive_file" value="avrdude-${AVRDUDE-VERSION}-i686-w64-mingw32.zip"/>
-      <param name="avrdude_version" value="${AVRDUDE-VERSION}"/>
-      <param name="arduinoOTA_archive_file" value="arduinoOTA-${arduinoOTA-VERSION}-windows_386.zip"/>
-      <param name="arduinoOTA_version" value="${arduinoOTA-VERSION}"/>
-    </antcall>
-  </target>
-
-  <target name="windows-run" depends="build,start"/>
-
-  <target name="windows-start">
-    <exec executable="windows/work/arduino.exe" dir="windows/work" spawn="false" failonerror="true"/>
-  </target>
-
-  <target name="windows-dist" depends="build" description="Create .zip files of windows version">
-    <zip destfile="windows/arduino-${full-version}.zip" level="9">
-      <zipfileset dir="windows/work" prefix="arduino-${version}"/>
-    </zip>
-
-    <echo>
-      =======================================================
-      Arduino for Windows was built. Grab the archive from
-
-      windows/arduino-${full-version}.zip
-      =======================================================
-    </echo>
-  </target>
-
-
   <!-- - - - - - - - -->
   <!-- Source        -->
   <!-- - - - - - - - -->
@@ -1223,8 +753,6 @@
 		  prefix="arduino-${version}"
 		  excludes="**/*.tgz,
 			     **/*.bz2,
-			     **/build/macosx/,
-			     **/build/windows/,
 			     **/work/,
 			     **/.git/,
 			     **/*.class"
@@ -1246,7 +774,7 @@
   <!-- - - - - - - - -->
 
   <target name="clean" description="Perform a spring cleaning"
-	  depends="linux-clean, windows-clean, macosx-clean, subprojects-clean">
+	  depends="linux-clean, subprojects-clean">
   </target>
 
   <target name="avr-toolchain-bundle" unless="light_bundle">
Index: arduino/app/src/processing/app/Base.java
===================================================================
--- a/app/src/processing/app/Base.java
+++ b/app/src/processing/app/Base.java
@@ -54,7 +54,6 @@ import processing.app.helpers.filefilters.OnlyDirs;
 import processing.app.helpers.filefilters.OnlyFilesWithExtension;
 import processing.app.javax.swing.filechooser.FileNameExtensionFilter;
 import processing.app.legacy.PApplet;
-import processing.app.macosx.ThinkDifferent;
 import processing.app.packages.LibraryList;
 import processing.app.packages.UserLibrary;
 import processing.app.packages.UserLibraryFolder.Location;
@@ -139,14 +138,6 @@ public class Base {
     }
     System.setProperty("java.net.useSystemProxies", "true");
 
-    if (OSUtils.isMacOS()) {
-      System.setProperty("apple.laf.useScreenMenuBar",
-        String.valueOf(!System.getProperty("os.version").startsWith("10.13")
-          || com.apple.eawt.Application.getApplication().isAboutMenuItemPresent()));
-
-      ThinkDifferent.init();
-    }
-
     try {
       INSTANCE = new Base(args);
     } catch (Throwable e) {
